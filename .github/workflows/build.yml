name: Build and Release Electron App

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Format check
        run: npm run format

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Build Electron app
        run: |
          if [ "${{ runner.os }}" == "macOS" ]; then
            npm run build:mac
          elif [ "${{ runner.os }}" == "Windows" ]; then
            npm run build:win
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          path: |
            dist/**/*
            !dist/**/*.blockmap
            !dist/**/builder-debug.yml

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Get version and timestamp
        id: meta
        run: |
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date "+%Y-%m-%d %H:%M")
          echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME=Release v$VERSION - $TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Delete existing release if exists (but keep tag)
        run: |
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.meta.outputs.VERSION }} --jq '.id' || echo "")
          if [ "$RELEASE_ID" != "" ]; then
            echo "Deleting existing release ID $RELEASE_ID"
            gh api -X DELETE repos/${{ github.repository }}/releases/$RELEASE_ID
          else
            echo "No existing release found."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (with timestamped name)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.VERSION }}
          name: ${{ steps.meta.outputs.RELEASE_NAME }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.VERSION }}
          files: |
            dist/**/*.dmg
            dist/**/*.exe
            dist/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
